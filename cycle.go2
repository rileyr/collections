package collections

// Cycle will call the given function N times. If N is greater
// than the number of elements in the collection, iteration will
// loop back to the first element when the last element is reached.
// If N <= 0, Cycle will run forever.
func Cycle(type T)(c Collection(T), n int, fn func(T)) {
  if len(c.Elems) == 0 { return }

  if n <= 0 {
    for { Each(c, fn) }
    return
  }

  ct := 0

  for {
    EachWhile(c, func(e T) bool {
      fn(e)
      ct++
      return ct < n
    })

    if ct >= n {
      break
    }
  }
}
